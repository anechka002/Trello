/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/boards/my": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of my created boards */
        get: operations["BoardsController_getMyBoards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/boards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of all boards created by all users */
        get: operations["BoardsPublicController_getBoards"];
        put?: never;
        /** Create new board */
        post: operations["BoardsController_createBoard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/boards/{boardId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one board by ID */
        get: operations["BoardsPublicController_getBoardById"];
        /** Update one of your boards */
        put: operations["BoardsController_updateBoard"];
        post?: never;
        /** Delete one of your boards */
        delete: operations["BoardsController_deleteBoard"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/boards/{boardId}/reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Change board order */
        put: operations["BoardsController_reorder"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/boards/{boardId}/images/main": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload main cover photo for board
         * @description
         *     - Only images in landscape orientation are supported
         *     - Minimum image height is 500 pixels
         *     - Recommended format: JPG or PNG
         *     - Form-data field: `file`
         *
         */
        post: operations["BoardsController_upload"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/boards/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of all tasks from all boards created by all users */
        get: operations["TasksPublicController_getAllTasks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/boards/{boardId}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of tasks belonging to the specified board */
        get: operations["TasksPublicController_getBoardTasks"];
        put?: never;
        /** Add a new task to your board */
        post: operations["TasksController_createTask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/boards/{boardId}/tasks/{taskId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get task details by ID */
        get: operations["TasksPublicController_getTaskDetails"];
        /** Update task */
        put: operations["TasksController_updateTask"];
        post?: never;
        /** Delete task from your board */
        delete: operations["TasksController_deleteTask"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/boards/{boardId}/tasks/{taskId}/reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Change task order within your board */
        put: operations["TasksController_reorderTask"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/boards/{boardId}/tasks/{taskId}/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Move task to another board */
        put: operations["TasksController_moveTaskToBoard"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/boards/{boardId}/tasks/{taskId}/attachments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload one or more files for task */
        post: operations["TasksController_uploadAttachment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/boards/{boardId}/tasks/{taskId}/attachments/{attachmentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete file for task */
        delete: operations["TasksController_deleteAttachment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/oauth-redirect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * OAuth redirect
         * @description The callback URL to redirect after granting access, <a target="_blank" href="https://oauth.apihub.it-incubator.io/realms/apihub/protocol/openid-connect/auth?client_id=trelly&response_type=code&redirect_uri=http://localhost:3000/oauth2/callback&scope=openid">https://oauth.apihub.it-incubator.io/realms/apihub/protocol/openid-connect/auth?client_id=trelly&response_type=code&redirect_uri=http://localhost:3000/oauth2/callback&scope=openid</a>
         */
        get: operations["AuthController_OauthRedirect"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Log in using the code received after OAuth authorization redirect */
        post: operations["AuthController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh refresh/access token pair */
        post: operations["AuthController_refresh"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Deactivate refresh token */
        post: operations["AuthController_logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user by access token */
        get: operations["AuthController_getMe"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        BoardImagesOutputDTO: {
            /** @description Must contain original photo size (156x156) and small photo size (48x48) */
            main?: unknown[][];
        };
        BoardOutputDTO: {
            id: string;
            title: string;
            description: string;
            addedAt: string;
            updatedAt: string;
            order: number;
            isImportant: boolean;
            images: components["schemas"]["BoardImagesOutputDTO"];
        };
        BoardListItemJsonApiData: {
            id: string;
            /** @example boards */
            type: string;
            attributes: components["schemas"]["BoardOutputDTO"];
        };
        GetMyBoardsOutput: {
            data: components["schemas"]["BoardListItemJsonApiData"][];
        };
        BoardCreateInputDTO: {
            title: string;
            description?: string;
        };
        BoardSingleData: {
            id: string;
            /** @example boards */
            type: string;
            attributes: components["schemas"]["BoardOutputDTO"];
        };
        GetBoardOutput: {
            data: components["schemas"]["BoardSingleData"];
        };
        BoardUpdateInputDTO: {
            title: string;
            description?: string;
            isImportant: boolean;
        };
        ReorderBoardsRequestPayload: {
            /** @description ID of the element after which to place the current one */
            putAfterItemId?: Record<string, never>;
        };
        GlobalTaskListItemDto: {
            id: string;
            title?: string;
            boardId: string;
            /** @enum {number} */
            status: 0 | 1 | 2 | 3;
            /** @enum {number} */
            priority: 0 | 1 | 2 | 3 | 4;
            addedAt: string;
            attachmentsCount: number;
        };
        GlobalTaskListItemJsonApiData: {
            id: string;
            /** @example tasks */
            type: string;
            attributes: components["schemas"]["GlobalTaskListItemDto"];
        };
        JsonApiMeta: {
            page: number;
            pageSize: number;
            totalCount: number;
            pagesCount: number;
        };
        GlobalTaskListResponse: {
            data: components["schemas"]["GlobalTaskListItemJsonApiData"][];
            meta: components["schemas"]["JsonApiMeta"];
        };
        BoardTaskListItemDto: {
            id: string;
            title: string;
            /** Format: date-time */
            addedAt: string;
            order: number;
            /** @enum {number} */
            status: 0 | 1 | 2 | 3;
            /** @enum {number} */
            priority: 0 | 1 | 2 | 3 | 4;
            startDate?: Record<string, never>;
            deadline?: Record<string, never>;
            /** Format: date-time */
            updatedAt: string;
            attachments: string[];
        };
        BoardTaskListItemJsonApiData: {
            id: string;
            /** @example tasks */
            type: string;
            attributes: components["schemas"]["BoardTaskListItemDto"];
        };
        BoardTaskListResponse: {
            data: components["schemas"]["BoardTaskListItemJsonApiData"][];
            meta: components["schemas"]["JsonApiMeta"];
        };
        TaskDetailsDto: {
            id: string;
            title?: string;
            description?: Record<string, never>;
            boardId: string;
            boardTitle: string;
            order: number;
            /** @enum {number} */
            status: 0 | 1 | 2 | 3;
            /** @enum {number} */
            priority: 0 | 1 | 2 | 3 | 4;
            startDate?: Record<string, never>;
            deadline?: Record<string, never>;
            /** Format: date-time */
            addedAt: string;
            updatedAt: string;
            attachments: string[];
        };
        TaskDetailsData: {
            id: string;
            /** @example tasks */
            type: string;
            attributes: components["schemas"]["TaskDetailsDto"];
        };
        GetTaskOutput: {
            data: components["schemas"]["TaskDetailsData"];
        };
        GetBoardsOutput: {
            data: components["schemas"]["BoardListItemJsonApiData"][];
            meta: components["schemas"]["JsonApiMeta"];
        };
        CreateTaskRequestPayload: {
            title: string;
        };
        MoveTaskToBoardRequestPayload: {
            /** @description ID of the new board to move the task to */
            targetBoardId: string;
            /** @description ID of the task after which to insert the moved task */
            putAfterItemId?: string;
        };
        UpdateTaskRequestPayload: {
            title: string;
            description?: string;
            /** @enum {number} */
            status?: 0 | 1 | 2 | 3;
            /** @enum {number} */
            priority?: 0 | 1 | 2 | 3 | 4;
            startDate?: string;
            deadline?: string;
        };
        LoginRequestPayload: {
            /** @description Authorization code received from OAuth server after redirect */
            code: string;
            /**
             * @description Specify the same redirect URI used in the initial OAuth server request
             * @example http://localhost:3000/oauth2/callback
             */
            redirectUri: string;
            /**
             * @description Access token lifetime (default "3m"); must be a string like "60s", "3m", "2h", or "1d"
             * @example 3m
             */
            accessTokenTTL?: string;
            /** @description Refresh token lifetime: if true, 30 days; if false, 30 minutes. accessTokenTTL must not exceed the refresh token lifetime */
            rememberMe: boolean;
        };
        RefreshOutput: {
            refreshToken: string;
            accessToken: string;
        };
        BadRequestException: Record<string, never>;
        UnauthorizedException: Record<string, never>;
        RefreshRequestPayload: {
            refreshToken: string;
        };
        LogoutRequestPayload: {
            refreshToken: string;
        };
        GetMeOutput: {
            userId: string;
            login: string;
        };
        /**
         * Format: binary
         * @description Файл в multipart/form-data
         */
        BinaryFile: string;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type SchemaBoardImagesOutputDto = components['schemas']['BoardImagesOutputDTO'];
export type SchemaBoardOutputDto = components['schemas']['BoardOutputDTO'];
export type SchemaBoardListItemJsonApiData = components['schemas']['BoardListItemJsonApiData'];
export type SchemaGetMyBoardsOutput = components['schemas']['GetMyBoardsOutput'];
export type SchemaBoardCreateInputDto = components['schemas']['BoardCreateInputDTO'];
export type SchemaBoardSingleData = components['schemas']['BoardSingleData'];
export type SchemaGetBoardOutput = components['schemas']['GetBoardOutput'];
export type SchemaBoardUpdateInputDto = components['schemas']['BoardUpdateInputDTO'];
export type SchemaReorderBoardsRequestPayload = components['schemas']['ReorderBoardsRequestPayload'];
export type SchemaGlobalTaskListItemDto = components['schemas']['GlobalTaskListItemDto'];
export type SchemaGlobalTaskListItemJsonApiData = components['schemas']['GlobalTaskListItemJsonApiData'];
export type SchemaJsonApiMeta = components['schemas']['JsonApiMeta'];
export type SchemaGlobalTaskListResponse = components['schemas']['GlobalTaskListResponse'];
export type SchemaBoardTaskListItemDto = components['schemas']['BoardTaskListItemDto'];
export type SchemaBoardTaskListItemJsonApiData = components['schemas']['BoardTaskListItemJsonApiData'];
export type SchemaBoardTaskListResponse = components['schemas']['BoardTaskListResponse'];
export type SchemaTaskDetailsDto = components['schemas']['TaskDetailsDto'];
export type SchemaTaskDetailsData = components['schemas']['TaskDetailsData'];
export type SchemaGetTaskOutput = components['schemas']['GetTaskOutput'];
export type SchemaGetBoardsOutput = components['schemas']['GetBoardsOutput'];
export type SchemaCreateTaskRequestPayload = components['schemas']['CreateTaskRequestPayload'];
export type SchemaMoveTaskToBoardRequestPayload = components['schemas']['MoveTaskToBoardRequestPayload'];
export type SchemaUpdateTaskRequestPayload = components['schemas']['UpdateTaskRequestPayload'];
export type SchemaLoginRequestPayload = components['schemas']['LoginRequestPayload'];
export type SchemaRefreshOutput = components['schemas']['RefreshOutput'];
export type SchemaBadRequestException = components['schemas']['BadRequestException'];
export type SchemaUnauthorizedException = components['schemas']['UnauthorizedException'];
export type SchemaRefreshRequestPayload = components['schemas']['RefreshRequestPayload'];
export type SchemaLogoutRequestPayload = components['schemas']['LogoutRequestPayload'];
export type SchemaGetMeOutput = components['schemas']['GetMeOutput'];
export type SchemaBinaryFile = components['schemas']['BinaryFile'];
export type $defs = Record<string, never>;
export interface operations {
    BoardsController_getMyBoards: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 200 (Board list successfully retrieved) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMyBoardsOutput"];
                };
            };
            /** @description Maximum board count exceeded (403 Forbidden) */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BoardsPublicController_getBoards: {
        parameters: {
            query?: {
                pageNumber?: number;
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description JSON:API list of boards with pagination */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetBoardsOutput"];
                };
            };
        };
    };
    BoardsController_createBoard: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BoardCreateInputDTO"];
            };
        };
        responses: {
            /** @description Board successfully created (201 Created) */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetBoardOutput"];
                };
            };
            /** @description Maximum board count (10) exceeded (403 Forbidden) */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BoardsPublicController_getBoardById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                boardId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Board successfully found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetBoardOutput"];
                };
            };
            /** @description Board with this ID not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BoardsController_updateBoard: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                boardId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BoardUpdateInputDTO"];
            };
        };
        responses: {
            /** @description Board successfully updated (200 OK) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetBoardOutput"];
                };
            };
            /** @description You are not the board owner (403 Forbidden) */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Board not found (404 Not Found) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BoardsController_deleteBoard: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                boardId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Board successfully deleted (204 No Content) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not the board owner (403 Forbidden) */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Board not found (404 Not Found) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BoardsController_reorder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                boardId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReorderBoardsRequestPayload"];
            };
        };
        responses: {
            /** @description Board order successfully changed (204 No Content) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BoardsController_upload: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                boardId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file: string;
                };
            };
        };
        responses: {
            /** @description 200 (Image successfully uploaded and saved) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BoardImagesOutputDTO"];
                };
            };
            /** @description 400 (Invalid file: cannot determine dimensions, wrong orientation or height too small) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 403 (You are not the board owner) */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 404 (Board not found) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksPublicController_getAllTasks: {
        parameters: {
            query?: {
                pageNumber?: number;
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of tasks */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GlobalTaskListResponse"];
                };
            };
        };
    };
    TasksPublicController_getBoardTasks: {
        parameters: {
            query?: {
                pageNumber?: number;
                pageSize?: number;
            };
            header?: never;
            path: {
                boardId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of tasks for specific board */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BoardTaskListResponse"];
                };
            };
            /** @description Board not found (if applicable) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksController_createTask: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                boardId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTaskRequestPayload"];
            };
        };
        responses: {
            /** @description Task successfully created (201 Created) */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTaskOutput"];
                };
            };
            /** @description Access forbidden or task limit exceeded (403 Forbidden) */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Board not found (404 Not Found) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksPublicController_getTaskDetails: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                taskId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Task details with attachments */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTaskOutput"];
                };
            };
            /** @description Task with this ID not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksController_updateTask: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                boardId: string;
                taskId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTaskRequestPayload"];
            };
        };
        responses: {
            /** @description Task successfully updated (200 OK) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTaskOutput"];
                };
            };
            /** @description Access forbidden (403 Forbidden) */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Task not found (404 Not Found) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksController_deleteTask: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                boardId: string;
                taskId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Task successfully deleted (200 OK) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Access forbidden (403 Forbidden) */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Task not found (404 Not Found) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksController_reorderTask: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                boardId: string;
                taskId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReorderBoardsRequestPayload"];
            };
        };
        responses: {
            /** @description Task order successfully updated (200 OK) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request: cannot move task after itself (400 Bad Request) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Access forbidden (403 Forbidden) */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Task or specified putAfterItemId not found (404 Not Found) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksController_moveTaskToBoard: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                boardId: string;
                taskId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MoveTaskToBoardRequestPayload"];
            };
        };
        responses: {
            /** @description Task successfully moved (204 No Content) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request: cannot move task after itself (400 Bad Request) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Access forbidden (403 Forbidden) */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Task or target board not found (404 Not Found) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksController_uploadAttachment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                taskId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Files successfully uploaded (201 Created) */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Maximum attachment count exceeded (403 Forbidden) */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Task not found (404 Not Found) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksController_deleteAttachment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                taskId: string;
                attachmentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Attachment successfully deleted (200 OK) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Access forbidden (403 Forbidden) */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Task or attachment not found (404 Not Found) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_OauthRedirect: {
        parameters: {
            query: {
                /** @description The callback URL to redirect after grand access,
                 *          https://oauth.apihub.it-incubator.io/realms/apihub/protocol/openid-connect/auth?client_id=trelly&response_type=code&redirect_uri=http://localhost:3000/oauth2/callback&scope=openid */
                callbackUrl: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK: Redirect executed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequestPayload"];
            };
        };
        responses: {
            /** @description OK: Token pair retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RefreshOutput"];
                };
            };
            /** @description Bad Request: Invalid request format or required parameters are missing */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Unauthorized: Code is invalid, expired, missing, or redirectUri does not match */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedException"];
                };
            };
        };
    };
    AuthController_refresh: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshRequestPayload"];
            };
        };
        responses: {
            /** @description OK: Token pair refreshed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RefreshOutput"];
                };
            };
            /** @description Unauthorized: Refresh token is invalid, expired, or missing */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedException"];
                };
            };
        };
    };
    AuthController_logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LogoutRequestPayload"];
            };
        };
        responses: {
            /** @description No Content: Refresh token deactivated; access token remains valid. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_getMe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK: Successfully retrieved user information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMeOutput"];
                };
            };
            /** @description Unauthorized: access token is missing or invalid */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
