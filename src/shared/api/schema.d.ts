/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/boards/my": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить список моих созданных досок */
        get: operations["BoardsController_getMyBoards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/boards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить список всех досок, созданных всеми пользователями */
        get: operations["BoardsPublicController_getBoards"];
        put?: never;
        /** Создать новую доску */
        post: operations["BoardsController_createBoard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/boards/{boardId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить одну доску по ID */
        get: operations["BoardsPublicController_getBoardById"];
        /** Обновить одну из своих досок */
        put: operations["BoardsController_updateBoard"];
        post?: never;
        /** Удалить одну из своих досок */
        delete: operations["BoardsController_deleteBoard"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/boards/{boardId}/reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Поменять порядок досок */
        put: operations["BoardsController_reorder"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/boards/{boardId}/images/main": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Загрузить главную фотографию-обложку для доски
         * @description
         *     - Поддерживаются только изображения в горизонтальной ориентации
         *     - Минимальная высота изображения — 500 пикселей
         *     - Рекомендуемый формат: JPG или PNG
         *     - Поле form-data: `file`
         *
         */
        post: operations["BoardsController_upload"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/boards/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить список всех тасок со всех досок, созданных всеми пользователями */
        get: operations["TasksPublicController_getAllTasks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/boards/{boardId}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить список задач, относящихся к указанной доске */
        get: operations["TasksPublicController_getBoardTasks"];
        put?: never;
        /** Добавить новую задачу на своей доске */
        post: operations["TasksController_createTask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/boards/{boardId}/tasks/{taskId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить детали задачи по ID */
        get: operations["TasksPublicController_getTaskDetails"];
        /** Обновить задачу */
        put: operations["TasksController_updateTask"];
        post?: never;
        /** Удалить задачу со своей доски */
        delete: operations["TasksController_deleteTask"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/boards/{boardId}/tasks/{taskId}/reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Сменить порядок задач в рамках своей доски */
        put: operations["TasksController_reorderTask"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/boards/{boardId}/tasks/{taskId}/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Переместить задачу на другую доску */
        put: operations["TasksController_moveTaskToBoard"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/boards/{boardId}/tasks/{taskId}/attachments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Загрузить один или несколько файлов для задачи */
        post: operations["TasksController_uploadAttachment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/boards/{boardId}/tasks/{taskId}/attachments/{attachmentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Удалить файл для задачи */
        delete: operations["TasksController_deleteAttachment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/oauth-redirect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * OAuth редирект
         * @description The callback URL to redirect after grand access,
         *          <a target="_blank" href="https://oauth.apihub.it-incubator.io/realms/apihub/protocol/openid-connect/auth?client_id=trelly&response_type=code&redirect_uri=http://localhost:3000/oauth2/callback&scope=openid">https://oauth.apihub.it-incubator.io/realms/apihub/protocol/openid-connect/auth?client_id=trelly&response_type=code&redirect_uri=http://localhost:3000/oauth2/callback&scope=openid</a>
         */
        get: operations["AuthController_OauthRedirect"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Залогиниться с помощью кода, полученного после редиректа после авторизации через OAuth */
        post: operations["AuthController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Обновить пару refresh/access токенов */
        post: operations["AuthController_refresh"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Деактивировать refresh-token */
        post: operations["AuthController_logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить текущего пользователя по access токену */
        get: operations["AuthController_getMe"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        BoardImagesOutputDTO: {
            /** @description Must contain original photo size (156x156) and small photo size (48x48) */
            main?: unknown[][];
        };
        BoardOutputDTO: {
            id: string;
            title: string;
            description: string;
            addedAt: string;
            updatedAt: string;
            order: number;
            isImportant: boolean;
            images: components["schemas"]["BoardImagesOutputDTO"];
        };
        BoardListItemJsonApiData: {
            id: string;
            /** @example boards */
            type: string;
            attributes: components["schemas"]["BoardOutputDTO"];
        };
        GetMyBoardsOutput: {
            data: components["schemas"]["BoardListItemJsonApiData"][];
        };
        BoardCreateInputDTO: {
            title: string;
            description?: string;
        };
        BoardSingleData: {
            id: string;
            /** @example boards */
            type: string;
            attributes: components["schemas"]["BoardOutputDTO"];
        };
        GetBoardOutput: {
            data: components["schemas"]["BoardSingleData"];
        };
        BoardUpdateInputDTO: {
            title: string;
            description?: string;
            isImportant: boolean;
        };
        ReorderBoardsRequestPayload: {
            /** @description ID элемента, после которого нужно поставить текущий */
            putAfterItemId?: Record<string, never>;
        };
        GlobalTaskListItemDto: {
            id: string;
            title?: string;
            boardId: string;
            /** @enum {number} */
            status: 0 | 1 | 2 | 3;
            /** @enum {number} */
            priority: 0 | 1 | 2 | 3 | 4;
            addedAt: string;
            attachmentsCount: number;
        };
        GlobalTaskListItemJsonApiData: {
            id: string;
            /** @example tasks */
            type: string;
            attributes: components["schemas"]["GlobalTaskListItemDto"];
        };
        JsonApiMeta: {
            page: number;
            pageSize: number;
            totalCount: number;
            pagesCount: number;
        };
        GlobalTaskListResponse: {
            data: components["schemas"]["GlobalTaskListItemJsonApiData"][];
            meta: components["schemas"]["JsonApiMeta"];
        };
        BoardTaskListItemDto: {
            id: string;
            title: string;
            /** Format: date-time */
            addedAt: string;
            order: number;
            /** @enum {number} */
            status: 0 | 1 | 2 | 3;
            /** @enum {number} */
            priority: 0 | 1 | 2 | 3 | 4;
            startDate?: Record<string, never>;
            deadline?: Record<string, never>;
            /** Format: date-time */
            updatedAt: string;
            attachments: string[];
        };
        BoardTaskListItemJsonApiData: {
            id: string;
            /** @example tasks */
            type: string;
            attributes: components["schemas"]["BoardTaskListItemDto"];
        };
        BoardTaskListResponse: {
            data: components["schemas"]["BoardTaskListItemJsonApiData"][];
            meta: components["schemas"]["JsonApiMeta"];
        };
        TaskDetailsDto: {
            id: string;
            title?: string;
            description?: Record<string, never>;
            boardId: string;
            boardTitle: string;
            order: number;
            /** @enum {number} */
            status: 0 | 1 | 2 | 3;
            /** @enum {number} */
            priority: 0 | 1 | 2 | 3 | 4;
            startDate?: Record<string, never>;
            deadline?: Record<string, never>;
            /** Format: date-time */
            addedAt: string;
            updatedAt: string;
            attachments: string[];
        };
        TaskDetailsData: {
            id: string;
            /** @example tasks */
            type: string;
            attributes: components["schemas"]["TaskDetailsDto"];
        };
        GetTaskOutput: {
            data: components["schemas"]["TaskDetailsData"];
        };
        GetBoardsOutput: {
            data: components["schemas"]["BoardListItemJsonApiData"][];
            meta: components["schemas"]["JsonApiMeta"];
        };
        CreateTaskRequestPayload: {
            title: string;
        };
        MoveTaskToBoardRequestPayload: {
            /** @description ID новой доски, в которую нужно переместить задачу */
            targetBoardId: string;
            /** @description ID задачи, после которой нужно вставить перемещаемую */
            putAfterItemId?: string;
        };
        UpdateTaskRequestPayload: {
            title: string;
            description?: string;
            /** @enum {number} */
            status?: 0 | 1 | 2 | 3;
            /** @enum {number} */
            priority?: 0 | 1 | 2 | 3 | 4;
            startDate?: string;
            deadline?: string;
        };
        LoginRequestPayload: {
            /** @description Код, полученный от oauth-сервер после редиректа */
            code: string;
            /**
             * @description Укажите тоже значение, что и во время первого запроса на oauth-сервер
             * @example http://localhost:3000/oauth2/callback
             */
            redirectUri: string;
            /**
             * @description Срок жизни accessToken-а (по дефолту "3m"), Можно использовать значение в формате: be a string like "60s", "3m", "2h", "1d"
             * @example 3m
             */
            accessTokenTTL: string;
            /** @description Как долго будет жить refreshToken. Если true - 1 месяц, если false - 30 минут. Явно указанный accessTokenTTL не должен быть больше, чем время жизни refreshToken */
            rememberMe: boolean;
        };
        RefreshOutput: {
            refreshToken: string;
            accessToken: string;
        };
        BadRequestException: Record<string, never>;
        UnauthorizedException: Record<string, never>;
        RefreshRequestPayload: {
            refreshToken: string;
        };
        LogoutRequestPayload: {
            refreshToken: string;
        };
        GetMeOutput: {
            userId: string;
            login: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type SchemaBoardImagesOutputDto = components['schemas']['BoardImagesOutputDTO'];
export type SchemaBoardOutputDto = components['schemas']['BoardOutputDTO'];
export type SchemaBoardListItemJsonApiData = components['schemas']['BoardListItemJsonApiData'];
export type SchemaGetMyBoardsOutput = components['schemas']['GetMyBoardsOutput'];
export type SchemaBoardCreateInputDto = components['schemas']['BoardCreateInputDTO'];
export type SchemaBoardSingleData = components['schemas']['BoardSingleData'];
export type SchemaGetBoardOutput = components['schemas']['GetBoardOutput'];
export type SchemaBoardUpdateInputDto = components['schemas']['BoardUpdateInputDTO'];
export type SchemaReorderBoardsRequestPayload = components['schemas']['ReorderBoardsRequestPayload'];
export type SchemaGlobalTaskListItemDto = components['schemas']['GlobalTaskListItemDto'];
export type SchemaGlobalTaskListItemJsonApiData = components['schemas']['GlobalTaskListItemJsonApiData'];
export type SchemaJsonApiMeta = components['schemas']['JsonApiMeta'];
export type SchemaGlobalTaskListResponse = components['schemas']['GlobalTaskListResponse'];
export type SchemaBoardTaskListItemDto = components['schemas']['BoardTaskListItemDto'];
export type SchemaBoardTaskListItemJsonApiData = components['schemas']['BoardTaskListItemJsonApiData'];
export type SchemaBoardTaskListResponse = components['schemas']['BoardTaskListResponse'];
export type SchemaTaskDetailsDto = components['schemas']['TaskDetailsDto'];
export type SchemaTaskDetailsData = components['schemas']['TaskDetailsData'];
export type SchemaGetTaskOutput = components['schemas']['GetTaskOutput'];
export type SchemaGetBoardsOutput = components['schemas']['GetBoardsOutput'];
export type SchemaCreateTaskRequestPayload = components['schemas']['CreateTaskRequestPayload'];
export type SchemaMoveTaskToBoardRequestPayload = components['schemas']['MoveTaskToBoardRequestPayload'];
export type SchemaUpdateTaskRequestPayload = components['schemas']['UpdateTaskRequestPayload'];
export type SchemaLoginRequestPayload = components['schemas']['LoginRequestPayload'];
export type SchemaRefreshOutput = components['schemas']['RefreshOutput'];
export type SchemaBadRequestException = components['schemas']['BadRequestException'];
export type SchemaUnauthorizedException = components['schemas']['UnauthorizedException'];
export type SchemaRefreshRequestPayload = components['schemas']['RefreshRequestPayload'];
export type SchemaLogoutRequestPayload = components['schemas']['LogoutRequestPayload'];
export type SchemaGetMeOutput = components['schemas']['GetMeOutput'];
export type $defs = Record<string, never>;
export interface operations {
    BoardsController_getMyBoards: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 200 (Список досок успешно получен) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMyBoardsOutput"];
                };
            };
            /** @description Превышено максимальное количество досок (403 Forbidden) */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BoardsPublicController_getBoards: {
        parameters: {
            query?: {
                pageNumber?: number;
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description JSON:API список досок с пагинацией */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetBoardsOutput"];
                };
            };
        };
    };
    BoardsController_createBoard: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BoardCreateInputDTO"];
            };
        };
        responses: {
            /** @description Доска успешно создана (201 Created) */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetBoardOutput"];
                };
            };
            /** @description Превышено максимальное количество досок (10) (403 Forbidden) */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BoardsPublicController_getBoardById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                boardId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Доска успешно найдена */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetBoardOutput"];
                };
            };
            /** @description Доска с таким ID не найдена */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BoardsController_updateBoard: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                boardId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BoardUpdateInputDTO"];
            };
        };
        responses: {
            /** @description Доска успешно обновлена (200 OK) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetBoardOutput"];
                };
            };
            /** @description Вы не являетесь владельцем доски (403 Forbidden) */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Доска не найдена (404 Not Found) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BoardsController_deleteBoard: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                boardId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Доска успешно удалена (204 No Content) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Вы не владелец доски (403 Forbidden) */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Доска не найдена (404 Not Found) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BoardsController_reorder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                boardId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReorderBoardsRequestPayload"];
            };
        };
        responses: {
            /** @description Порядок досок успешно изменён (204 No Content) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BoardsController_upload: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                boardId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file: string;
                };
            };
        };
        responses: {
            /** @description 200 (Изображение успешно загружено и сохранено) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BoardImagesOutputDTO"];
                };
            };
            /** @description 400 (Невалидный файл: невозможно определить размеры, неверная ориентация или слишком маленькая высота) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 403 (Вы не владелец доски) */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 404 (Доска не найдена) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksPublicController_getAllTasks: {
        parameters: {
            query?: {
                pageNumber?: number;
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Пагинированный список задач */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GlobalTaskListResponse"];
                };
            };
        };
    };
    TasksPublicController_getBoardTasks: {
        parameters: {
            query?: {
                pageNumber?: number;
                pageSize?: number;
            };
            header?: never;
            path: {
                boardId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Пагинированный список задач конкретной доски */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BoardTaskListResponse"];
                };
            };
            /** @description Доска не найдена (если применимо) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksController_createTask: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                boardId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTaskRequestPayload"];
            };
        };
        responses: {
            /** @description Задача успешно создана (201 Created) */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTaskOutput"];
                };
            };
            /** @description Доступ запрещён или превышен лимит задач (403 Forbidden) */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Доска не найдена (404 Not Found) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksPublicController_getTaskDetails: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                taskId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Детали задачи с вложениями */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTaskOutput"];
                };
            };
            /** @description Задача с таким ID не найдена */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksController_updateTask: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                boardId: string;
                taskId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTaskRequestPayload"];
            };
        };
        responses: {
            /** @description Задача успешно обновлена (200 OK) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTaskOutput"];
                };
            };
            /** @description Доступ запрещён (403 Forbidden) */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Задача не найдена (404 Not Found) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksController_deleteTask: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                boardId: string;
                taskId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Задача успешно удалена (200 OK) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Доступ запрещён (403 Forbidden) */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Задача не найдена (404 Not Found) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksController_reorderTask: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                boardId: string;
                taskId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReorderBoardsRequestPayload"];
            };
        };
        responses: {
            /** @description Порядок задач успешно обновлён (200 OK) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Некорректный запрос: нельзя переместить задачу саму за себя (400 Bad Request) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Доступ запрещён (403 Forbidden) */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Задача или указанный putAfterItemId не найдены (404 Not Found) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksController_moveTaskToBoard: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                boardId: string;
                taskId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MoveTaskToBoardRequestPayload"];
            };
        };
        responses: {
            /** @description Задача успешно перемещена (204 No Content) */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Некорректный запрос: нельзя переместить задачу саму за себя (400 Bad Request) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Доступ запрещён (403 Forbidden) */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Задача или целевая доска не найдены (404 Not Found) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksController_uploadAttachment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                taskId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Файлы успешно загружены (201 Created) */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Превышено максимальное количество вложений (403 Forbidden) */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Задача не найдена (404 Not Found) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksController_deleteAttachment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                taskId: string;
                attachmentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Вложение успешно удалено (200 OK) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Доступ запрещён (403 Forbidden) */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Задача или вложение не найдены (404 Not Found) */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_OauthRedirect: {
        parameters: {
            query?: {
                /** @description The callback URL to redirect after grand access,
                 *          https://oauth.apihub.it-incubator.io/realms/apihub/protocol/openid-connect/auth?client_id=trelly&response_type=code&redirect_uri=http://localhost:3000/oauth2/callback&scope=openid */
                callbackUrl?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK: Редирект выполнен */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequestPayload"];
            };
        };
        responses: {
            /** @description OK: Успешно получена пара токенов */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RefreshOutput"];
                };
            };
            /** @description BadRequest: Неверный формат запроса или отсутствуют обязательные параметры */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestException"];
                };
            };
            /** @description Unauthorized: Код недействителен, истёк или не передан, или не совпадает redirectUri */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedException"];
                };
            };
        };
    };
    AuthController_refresh: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshRequestPayload"];
            };
        };
        responses: {
            /** @description OK: Успешное обновление пары токенов */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RefreshOutput"];
                };
            };
            /** @description Unauthorized: Refresh-token недействителен, истёк или не передан */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedException"];
                };
            };
        };
    };
    AuthController_logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LogoutRequestPayload"];
            };
        };
        responses: {
            /** @description OK: refresh токен деактивирован, при этом access-токен остаётся ещё валидным. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_getMe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK: Успешное получение информации о пользователе */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMeOutput"];
                };
            };
            /** @description Unauthorized: access токен отсутствует или недействителен */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
